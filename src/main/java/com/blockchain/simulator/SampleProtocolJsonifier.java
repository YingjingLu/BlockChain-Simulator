package com.blockchain.simulator;
import java.io.IOException;
import java.util.List;
import java.util.LinkedList;
import java.lang.IllegalArgumentException;
import org.json.simple.parser.ParseException;

/**
 * Sample protocol's IO class
 */
public class SampleProtocolJsonifier extends Jsonifer {
    private final SampleProtocolRoundSimulator roundSimulator;
    public SampleProtocolJsonifier(final SampleProtocolRoundSimulator roundSimulator, final String traceRootPath) {
        super(traceRootPath);
        this.roundSimulator = roundSimulator;
    }

    /**
     * Convert the config.json of the protocol into the config object to hold data
     * TODO: Implement the parsing to convert json read to config object
     *
     * @return
     * @throws IOException
     * @throws ParseException
     * @throws IllegalArgumentException
     */
    public SampleProtocolConfig getConfig() throws IOException, ParseException, IllegalArgumentException {
        return null;
    }

    /**
     * Function that reads the input messages from json files
     * TODO: Implement the function to read from JSON to message input
     *
     * @param round
     * @return
     */
    public List<SampleProtocolMessage> getInput(final int round) {

        return new LinkedList<SampleProtocolMessage>();
    }

    /**
     * Function that loads the inter player messages from message trace file of that round
     * TODO: implement the process to parse the json the of message trace
     *
     * @param round
     * @return
     */
    public List<Task> getMessageTrace(final int round) {
        return new LinkedList<Task>();
    }

    /**
     * Write the messages generated by players during round to the network into the trace
     * TODO: Implement the json dumper to dump the trace into json file
     *
     * @param round
     * @param messageTaskList
     */
    public void writeMessageTrace(final int round, List<Task> messageTaskList) {
    }

    /**
     * Write the player state trace of each player into the JSON file
     * TODO: implement the dumper to store all players' status to json
     *
     * @param round
     */
    public void writeStateTracePath(final int round) {

    }
}
